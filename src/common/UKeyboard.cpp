#include "UKeyboard.h"

#include "UText.h"

static constexpr byte _gKCToWin[256] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x0C, 0x00, 0x6F, 0x6A, 0x6D, 0xBB,
    0x00, 0x6E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F,
    0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xBD, 0x00, 0xDB, 0xDD, 0xDC, 0xBA, 0xDE, 0xBC, 0xBE, 0xBF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x09, 0x0D, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x24, 0x23, 0x21, 0x22, 0x26, 0x28, 0x25, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x1B, 0x08, 0x2F, 0x2E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x14, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0x5B, 0x5C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F,
    0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

uint UKeyboard::KeyToChar(ushort inKeyCode, uint inMods)
{
	uint virtualKey = _gKCToWin[inKeyCode];
#ifdef _WIN32
	if (inMods == 0)
	{
		virtualKey = MapVirtualKeyW(virtualKey, 2);
		if (virtualKey & 0x80000000) return 0;
		return UText::ToLower(virtualKey);
	}

	// Handle shift modifier case
	if (inMods == 8)
	{
		virtualKey = MapVirtualKeyW(virtualKey, 2);
		if (virtualKey & 0x80000000) return 0;
		return UText::ToUpper(virtualKey);
	}

	// Prepare keyboard state
	BYTE keyboardState[256] = {0};
	if (inMods & 0x21) keyboardState[VK_CAPITAL] = 0x80; // Caps Lock
	if (inMods & 2) keyboardState[VK_SHIFT] = 0x80;      // Shift
	if (inMods & 8) keyboardState[VK_CONTROL] = 0x80;    // Ctrl
	if (inMods & 4) keyboardState[VK_MENU] = 0x80;       // Alt
	if (inMods & 0x10) keyboardState[VK_NUMLOCK] = 0x80; // Num Lock

	WCHAR unicodeChar[2] = {0};
	int charCount = ToUnicode(virtualKey, 0, keyboardState, unicodeChar, 2, 0);

	// Handle surrogate pairs for Unicode characters
	if (charCount > 0)
		if (charCount == 2 && ((unicodeChar[0] >> 10) == 0x36) && ((unicodeChar[1] >> 10) == 0x37))
			return (((unicodeChar[0] & 0x3FF) << 10) | (unicodeChar[1] & 0x3FF)) + 0x10000;
		else
			return unicodeChar[0];
#endif // _WIN32
}
